(ns reph)
(use pharen.repl as repl)

(defmacro when-set (val)
  '(when (isset ~val) ~val))

(error-reporting E_ALL)
(set-time-limit 0)
(ob-implicit-flush)

(fn get-repl-vars (file)
  (if file
    (let [phpfile (str-replace ".phn" ".php" file)]
      (repl.get-file-vars phpfile (arr [])))
    (arr [])))

(fn repl-loop (msgsock repl-vars)
  (def prompt
    (lambda (prompt-str)
            (socket-write msgsock prompt-str (strlen prompt-str))
            (let [code (socket-read msgsock 2048 PHP_NORMAL_READ)]
              (if (false? code)
                "quit"
                code))))

  (def reph-prn
    (lambda (result)
            (let [res-line (. result "\n")]
              (socket-write msgsock res-line (strlen res-line)))))

  (when (false? (repl.work "" repl-vars prompt reph-prn))
    (socket-shutdown msgsock)
    TRUE))

(fn accept-loop (sock repl-vars)
  (let [msgsock (socket-accept sock)
        msg (repl.intro)]
    (socket-write msgsock msg (strlen msg))
    (if (false? (repl-loop msgsock repl-vars))
      (socket-close sock)
      (accept-loop sock repl-vars))))

(let [addr "127.0.0.1"
      port 10000
      sock (socket-create AF_INET SOCK_STREAM SOL_TCP)
      file (when-set (:argv 1))
      repl-vars (get-repl-vars file)]
  (when file (compile-file file))
  (set! (:: .NamespaceNode repling) TRUE)
  (socket-bind sock addr port)
  (socket-listen sock 5)
  (prn "Initializing Reph server on " addr ":" port)
  (accept-loop sock repl-vars)
  (socket-close sock))
