(ns reph)
(use pharen.repl as repl)

(error-reporting E_ALL)
(set-time-limit 0)
(ob-implicit-flush)

(fn get-repl-vars (file)
  (if file
    (let [phpfile (str-replace ".phn" ".php" file)]
      (repl.get-file-vars phpfile (arr [])))
    (arr [])))

(fn repl-loop (msgsock repl-vars)
  (def prompt
    (lambda (prstr)
            (local prompt-str (format prstr "prompt"))
            (socket-write msgsock prompt-str (strlen prompt-str))
            (let [code (socket-read msgsock 2048 PHP_NORMAL_READ)]
              (if (false? code)
                "quit"
                code))))

  (def reph-prn
    (lambda (result)
            (let [res-line (format (. result "\n") "result")]
              (socket-write msgsock res-line (strlen res-line)))))

  (when (false? (repl.work "" repl-vars prompt reph-prn))
    (socket-shutdown msgsock)
    TRUE))

(fn accept-loop (sock repl-vars)
  (let [msgsock (socket-accept sock)
        msg (format (repl.intro) "result")]
    (socket-write msgsock msg (strlen msg))
    (if (false? (repl-loop msgsock repl-vars))
      (socket-close sock)
      (accept-loop sock repl-vars))))

(fn run ([port 10000] [opts []])
  (keyword-call global $argv)

  (let [addr "127.0.0.1"
        sock (socket-create AF_INET SOCK_STREAM SOL_TCP)
        file (when-set (:opts :file))
        repl-vars (get-repl-vars file)]
    (when file (compile-file file))
    (set! (:: .NamespaceNode repling) TRUE)
    (socket-set-option sock SOL_SOCKET SO_REUSEADDR 1)
    (socket-bind sock addr port)
    (socket-listen sock 5)
    (prn "Initializing Reph server on " addr ":" port)
    (accept-loop sock repl-vars)
    (socket-close sock)))

(when-not (count (debug-backtrace))
  (local opts (getopt "j::" (arr ["file:"])))
  (if (isset (:opts :j)) 
    (fn format (string type)
      (. (json-encode (arr {:s string :type type})) "\n"))
    (fn format (string type)
      string))
  (run 10000 opts))
